{"title":"Theme and CSS","markdown":{"yaml":{"format":"html","execute":{"echo":false,"code-tools":true},"engine":"jupyter","jupyter":"python3","page-layout":"custom","resources":"assets/clubicons"},"headingText":"Theme and CSS","containsRefs":false,"markdown":"\n\n```{python}\nfrom reactable import Reactable, Theme, options, embed_css, Column, CellInfo\nfrom reactable.tags import to_widget\nfrom IPython.display import display, HTML\nimport htmltools\nfrom htmltools import tags\nimport pandas as pd\nfrom mizani.palettes import gradient_n_pal\nimport numpy as np\n\noptions.theme = Theme(\n    header_style=\"hsl(233, 9%, 19%) !important\",\n    border_color=\"hsl(233, 9%, 22%) !important\",\n    highlight_color=\"hsl(233, 9%, 87%)\",\n    select_style={\"background-color\": \"hsl(233, 9%, 25%)\"},\n)\nembed_css()\n\n# Abbreviations\nteam_abbreviations = {\n    'Adelaide': 'ADE', 'Brisbane Lions': 'BRI', 'Carlton': 'CAR', 'Collingwood': 'COL',\n    'Essendon': 'ESS', 'Fremantle': 'FRE', 'Geelong': 'GEE', 'Gold Coast': 'GC',\n    'Greater Western Sydney': 'GWS', 'Hawthorn': 'HAW', 'Melbourne': 'MEL',\n    'North Melbourne': 'NM', 'Port Adelaide': 'PORT', 'Richmond': 'RIC',\n    'St Kilda': 'STK', 'Sydney': 'SYD', 'West Coast': 'WCE', 'Western Bulldogs': 'WB'\n}\n\n# Predictions data\npredictions = pd.read_csv('data/predictions.csv')\n\ndef fmt_image(ci: CellInfo):\n    team = ci.value\n    row = predictions[\n        (predictions['Home'] == team) | (predictions['Away'] == team)\n    ].iloc[0]\n    is_winner = (\n        (row['Home'] == team and row['Margin'] > 0) or\n        (row['Away'] == team and row['Margin'] < 0)\n    )\n    abbreviated_team = team_abbreviations.get(team, team)\n    \n    image = htmltools.img(\n        src=f\"assets/clubicons/{team}-40.png\",\n        style=\"height: 24px; vertical-align: middle;\",\n        alt=abbreviated_team,\n    )\n\n    # Always apply span shift to the text\n    text_span = htmltools.span(\n        abbreviated_team,\n        style=\"position: relative; top: 2px;\"\n    )\n\n    # Apply bubble style conditionally\n    if is_winner:\n        name_div = htmltools.div(\n            text_span,\n            style=(\n                \"display: inline-block; margin-left: 6px; padding: 2px 6px; \"\n                \"border-radius: 6px; line-height: 1.2; vertical-align: middle; \"\n                \"background-color: #e8f3c3;\"\n            )\n        )\n    else:\n        name_div = htmltools.div(\n            text_span,\n            style=(\n                \"display: inline-block; margin-left: 6px; line-height: 1.2;\"\n            )\n        )\n\n    return htmltools.TagList(\n        htmltools.div(\n            [image, name_div],\n            style=\"display: flex; align-items: center; gap: 4px;\"\n        )\n    )\n\npred_table = Reactable(\n    predictions[['Home', 'Away', 'Venue', 'Margin', 'Prob']],\n    columns={\n        \"Home\": Column(cell=fmt_image, style={\"font-weight\": \"bold\"},header_style={\"text-align\": \"center\"}),\n        \"Away\": Column(cell=fmt_image, style={\"font-weight\": \"bold\", \"border-right\": \"1px solid #eee\"},header_style={\"text-align\": \"center\"}),\n        \"Margin\": Column(\n            name=\"Margin\",\n            cell=lambda ci: f\"{int(np.ceil(ci.value)) if ci.value < 0 else int(np.floor(ci.value))}\"  # Custom rounding logic and remove decimal\n        , style ={\"text-align\": \"center\"},header_style= {\"text-align\": \"center\"}),\n        \"Prob\": Column(name=\"Probability\",\n            cell=lambda ci: f\"{ ci.value * 100:.0f}%\",style ={\"text-align\": \"center\"}, header_style={\"text-align\": \"center\"})\n    },\n    wrap=False,\n    highlight=True,\n    class_=\"prediction-tbl\"\n)\n\n# Ratings table\nladder = pd.read_csv('data/ratings.csv')\nladder = ladder[['team', 'combined', 'orating', 'drating']].round(1)\npal = gradient_n_pal(['#ffd864','#ffffff', '#66a558'])\n\ndef fmt_image_team(ci: CellInfo):\n    team = ci.value\n    abbreviated_team = team_abbreviations.get(team, team)\n    return htmltools.TagList(\n        htmltools.div([\n            htmltools.img(src=f\"assets/clubicons/{team}-40.png\",\n                          style=\"height: 24px; vertical-align: middle;\",\n                          alt=team),\n            htmltools.div(abbreviated_team)\n        ], style=\"display: flex; align-items: center; gap: 4px;\")\n    )\n\ndef fmt_fill(ci: CellInfo):\n    if not isinstance(ci.value, float): return {}\n    val_range = max(ladder[ci.column_name]) - min(ladder[ci.column_name])\n    normalized = (ci.value - min(ladder[ci.column_name])) / val_range\n    return {\"background\": pal(normalized)}\n\nrating_table = Reactable(\n    ladder,\n    default_sorted=['combined'],\n    default_sort_order=\"desc\",\n    default_col_def=Column(style=fmt_fill),\n    columns={\n        \"team\": Column(name=\"Team\", cell=fmt_image_team,style={\"font-weight\": \"bold\"}),\n        \"combined\": Column(name=\"Rating\"),\n        \"orating\": Column(name=\"Offence\"),\n        \"drating\": Column(name=\"Defence\"),\n    },\n    pagination=False,\n    bordered=False,\n    class_='ladder-tbl'\n)\n\n# Output widget\nto_widget(\n    tags.div(\n        # Page layout container\n        tags.div(\n            [\n                # Left side: Predictions & blog\n                tags.div(\n                    [\n                        tags.div(\n                            [\n                                tags.h2(\"Predictions For Round 21\", style=\"text-align: center; font-size: 32px; margin: 0; padding-top: 8.5px\"),\n                                pred_table\n                            ],\n                            class_=\"prediction-box\"\n                        ),\n                        tags.a(\n                            tags.div(\n                                [\n                                    tags.h3(\n                                        \"Understanding The Ratings\",\n                                        style=(\n                                            \"text-align: left; font-size: 24px; margin: 0; \"\n                                            \"color: #000000; font-style: normal;\"\n                                        ),\n                                    ),\n                                    tags.p(\n                                        \"The predictions and ratings cards show the latest output of the ODELO margin model. To read more about how the model works click anywhere on this card.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"The predictions card shows the expected result fpr each game in the next round. The expected winner is highlighted in green. Margins and win probability are stated from the home teamâ€™s perspective.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"Latest ratings shows the model's internal ranking of teams. Ratings are used to generate the margin predictions each week and are updated after each round.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"Ratings are measured in points better/worse than the league average score (82). The rating column depicts the sum of the ratings but is a cosmetic measure not used in calculating expected margins.\",\n                                        class_=\"card-style\",\n                                    ),\n                                ],\n                                class_=\"blog-card\",\n                                style=(\n                                    \"background-color: #ffffff; padding: 20px; border-radius: 16px; \"\n                                    \"box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\"\n                                ),\n                            ),\n                            href=\"/posts/Intro/Introduction.html\",\n                            style=\"display: block; text-decoration: none; color: inherit;\"\n                        ),\n                    ],\n                    class_=\"prediction-panel\"\n                ),\n                # Right side: Ratings\n                tags.div(\n                    [\n                        tags.div(\n                            [\n                                tags.h2(\"Latest Ratings\", style=\"text-align: center; font-size: 32px; margin: 0; padding-top: 8.5px\"),\n                                rating_table\n                            ],\n                            class_=\"rating-box\"\n                        )\n                    ],\n                    class_=\"rating-panel\"\n                ),\n            ],\n            class_=\"main-container\"\n        ),\n\n        # Embedded CSS\n        tags.style(\"\"\"\n            .main-container {\n                display: flex;\n                width: 100%;\n                min-height: 100vh;\n                gap: 20px;\n                box-sizing: border-box;\n                padding: 20px;\n                align-items: flex-start;\n            }\n\n            .prediction-panel {\n                width: 66.67%;\n                display: flex;\n                flex-direction: column;\n                flex-shrink: 0;\n            }\n\n            .prediction-box {\n                background-color: #ffffff;\n                padding: 10px;\n                border-radius: 16px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n                margin-bottom: 20px;\n                width: 100%;\n                overflow: visible;\n            }\n\n            .blog-links {\n                background-color: #f9f9f9;\n                padding: 10px;\n                border-radius: 12px;\n                text-align: center;\n                font-style: italic;\n                color: #666;\n                width: 100%;\n            }\n\n            .rating-panel {\n                width: 33.33%;\n                flex-shrink: 0;\n                padding-right: 20px;\n            }\n\n            .rating-box {\n                background-color: #ffffff;\n                padding: 10px;\n                border-radius: 16px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n                width: 100%;\n                overflow: visible;\n            }\n\n            /* Table fixes to prevent inner scroll */\n            .reactable-table {\n                max-height: none !important;\n                overflow: visible !important;\n                display: block;\n                width: 100%;\n            }\n\n            .reactable-table tbody {\n                display: table-row-group !important;\n            }\n\n            .reactable-table thead,\n            .reactable-table tr,\n            .reactable-table td {\n                overflow: visible !important;\n                height: auto !important;\n            }\n\n            .reactable-table td {\n                white-space: nowrap;\n            }\n\n            @media (max-width: 768px) {\n                .main-container {\n                    flex-direction: column;\n                }\n                .prediction-panel,\n                .rating-panel {\n                    width: 100%;\n                    padding-right: 0px;\n                }\n            }\n        \"\"\")\n    )\n)\n```","srcMarkdownNoYaml":"\n\n```{python}\nfrom reactable import Reactable, Theme, options, embed_css, Column, CellInfo\nfrom reactable.tags import to_widget\nfrom IPython.display import display, HTML\nimport htmltools\nfrom htmltools import tags\nimport pandas as pd\nfrom mizani.palettes import gradient_n_pal\nimport numpy as np\n\n# Theme and CSS\noptions.theme = Theme(\n    header_style=\"hsl(233, 9%, 19%) !important\",\n    border_color=\"hsl(233, 9%, 22%) !important\",\n    highlight_color=\"hsl(233, 9%, 87%)\",\n    select_style={\"background-color\": \"hsl(233, 9%, 25%)\"},\n)\nembed_css()\n\n# Abbreviations\nteam_abbreviations = {\n    'Adelaide': 'ADE', 'Brisbane Lions': 'BRI', 'Carlton': 'CAR', 'Collingwood': 'COL',\n    'Essendon': 'ESS', 'Fremantle': 'FRE', 'Geelong': 'GEE', 'Gold Coast': 'GC',\n    'Greater Western Sydney': 'GWS', 'Hawthorn': 'HAW', 'Melbourne': 'MEL',\n    'North Melbourne': 'NM', 'Port Adelaide': 'PORT', 'Richmond': 'RIC',\n    'St Kilda': 'STK', 'Sydney': 'SYD', 'West Coast': 'WCE', 'Western Bulldogs': 'WB'\n}\n\n# Predictions data\npredictions = pd.read_csv('data/predictions.csv')\n\ndef fmt_image(ci: CellInfo):\n    team = ci.value\n    row = predictions[\n        (predictions['Home'] == team) | (predictions['Away'] == team)\n    ].iloc[0]\n    is_winner = (\n        (row['Home'] == team and row['Margin'] > 0) or\n        (row['Away'] == team and row['Margin'] < 0)\n    )\n    abbreviated_team = team_abbreviations.get(team, team)\n    \n    image = htmltools.img(\n        src=f\"assets/clubicons/{team}-40.png\",\n        style=\"height: 24px; vertical-align: middle;\",\n        alt=abbreviated_team,\n    )\n\n    # Always apply span shift to the text\n    text_span = htmltools.span(\n        abbreviated_team,\n        style=\"position: relative; top: 2px;\"\n    )\n\n    # Apply bubble style conditionally\n    if is_winner:\n        name_div = htmltools.div(\n            text_span,\n            style=(\n                \"display: inline-block; margin-left: 6px; padding: 2px 6px; \"\n                \"border-radius: 6px; line-height: 1.2; vertical-align: middle; \"\n                \"background-color: #e8f3c3;\"\n            )\n        )\n    else:\n        name_div = htmltools.div(\n            text_span,\n            style=(\n                \"display: inline-block; margin-left: 6px; line-height: 1.2;\"\n            )\n        )\n\n    return htmltools.TagList(\n        htmltools.div(\n            [image, name_div],\n            style=\"display: flex; align-items: center; gap: 4px;\"\n        )\n    )\n\npred_table = Reactable(\n    predictions[['Home', 'Away', 'Venue', 'Margin', 'Prob']],\n    columns={\n        \"Home\": Column(cell=fmt_image, style={\"font-weight\": \"bold\"},header_style={\"text-align\": \"center\"}),\n        \"Away\": Column(cell=fmt_image, style={\"font-weight\": \"bold\", \"border-right\": \"1px solid #eee\"},header_style={\"text-align\": \"center\"}),\n        \"Margin\": Column(\n            name=\"Margin\",\n            cell=lambda ci: f\"{int(np.ceil(ci.value)) if ci.value < 0 else int(np.floor(ci.value))}\"  # Custom rounding logic and remove decimal\n        , style ={\"text-align\": \"center\"},header_style= {\"text-align\": \"center\"}),\n        \"Prob\": Column(name=\"Probability\",\n            cell=lambda ci: f\"{ ci.value * 100:.0f}%\",style ={\"text-align\": \"center\"}, header_style={\"text-align\": \"center\"})\n    },\n    wrap=False,\n    highlight=True,\n    class_=\"prediction-tbl\"\n)\n\n# Ratings table\nladder = pd.read_csv('data/ratings.csv')\nladder = ladder[['team', 'combined', 'orating', 'drating']].round(1)\npal = gradient_n_pal(['#ffd864','#ffffff', '#66a558'])\n\ndef fmt_image_team(ci: CellInfo):\n    team = ci.value\n    abbreviated_team = team_abbreviations.get(team, team)\n    return htmltools.TagList(\n        htmltools.div([\n            htmltools.img(src=f\"assets/clubicons/{team}-40.png\",\n                          style=\"height: 24px; vertical-align: middle;\",\n                          alt=team),\n            htmltools.div(abbreviated_team)\n        ], style=\"display: flex; align-items: center; gap: 4px;\")\n    )\n\ndef fmt_fill(ci: CellInfo):\n    if not isinstance(ci.value, float): return {}\n    val_range = max(ladder[ci.column_name]) - min(ladder[ci.column_name])\n    normalized = (ci.value - min(ladder[ci.column_name])) / val_range\n    return {\"background\": pal(normalized)}\n\nrating_table = Reactable(\n    ladder,\n    default_sorted=['combined'],\n    default_sort_order=\"desc\",\n    default_col_def=Column(style=fmt_fill),\n    columns={\n        \"team\": Column(name=\"Team\", cell=fmt_image_team,style={\"font-weight\": \"bold\"}),\n        \"combined\": Column(name=\"Rating\"),\n        \"orating\": Column(name=\"Offence\"),\n        \"drating\": Column(name=\"Defence\"),\n    },\n    pagination=False,\n    bordered=False,\n    class_='ladder-tbl'\n)\n\n# Output widget\nto_widget(\n    tags.div(\n        # Page layout container\n        tags.div(\n            [\n                # Left side: Predictions & blog\n                tags.div(\n                    [\n                        tags.div(\n                            [\n                                tags.h2(\"Predictions For Round 21\", style=\"text-align: center; font-size: 32px; margin: 0; padding-top: 8.5px\"),\n                                pred_table\n                            ],\n                            class_=\"prediction-box\"\n                        ),\n                        tags.a(\n                            tags.div(\n                                [\n                                    tags.h3(\n                                        \"Understanding The Ratings\",\n                                        style=(\n                                            \"text-align: left; font-size: 24px; margin: 0; \"\n                                            \"color: #000000; font-style: normal;\"\n                                        ),\n                                    ),\n                                    tags.p(\n                                        \"The predictions and ratings cards show the latest output of the ODELO margin model. To read more about how the model works click anywhere on this card.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"The predictions card shows the expected result fpr each game in the next round. The expected winner is highlighted in green. Margins and win probability are stated from the home teamâ€™s perspective.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"Latest ratings shows the model's internal ranking of teams. Ratings are used to generate the margin predictions each week and are updated after each round.\",\n                                        class_=\"card-style\",\n                                    ),\n                                    tags.p(\n                                        \"Ratings are measured in points better/worse than the league average score (82). The rating column depicts the sum of the ratings but is a cosmetic measure not used in calculating expected margins.\",\n                                        class_=\"card-style\",\n                                    ),\n                                ],\n                                class_=\"blog-card\",\n                                style=(\n                                    \"background-color: #ffffff; padding: 20px; border-radius: 16px; \"\n                                    \"box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\"\n                                ),\n                            ),\n                            href=\"/posts/Intro/Introduction.html\",\n                            style=\"display: block; text-decoration: none; color: inherit;\"\n                        ),\n                    ],\n                    class_=\"prediction-panel\"\n                ),\n                # Right side: Ratings\n                tags.div(\n                    [\n                        tags.div(\n                            [\n                                tags.h2(\"Latest Ratings\", style=\"text-align: center; font-size: 32px; margin: 0; padding-top: 8.5px\"),\n                                rating_table\n                            ],\n                            class_=\"rating-box\"\n                        )\n                    ],\n                    class_=\"rating-panel\"\n                ),\n            ],\n            class_=\"main-container\"\n        ),\n\n        # Embedded CSS\n        tags.style(\"\"\"\n            .main-container {\n                display: flex;\n                width: 100%;\n                min-height: 100vh;\n                gap: 20px;\n                box-sizing: border-box;\n                padding: 20px;\n                align-items: flex-start;\n            }\n\n            .prediction-panel {\n                width: 66.67%;\n                display: flex;\n                flex-direction: column;\n                flex-shrink: 0;\n            }\n\n            .prediction-box {\n                background-color: #ffffff;\n                padding: 10px;\n                border-radius: 16px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n                margin-bottom: 20px;\n                width: 100%;\n                overflow: visible;\n            }\n\n            .blog-links {\n                background-color: #f9f9f9;\n                padding: 10px;\n                border-radius: 12px;\n                text-align: center;\n                font-style: italic;\n                color: #666;\n                width: 100%;\n            }\n\n            .rating-panel {\n                width: 33.33%;\n                flex-shrink: 0;\n                padding-right: 20px;\n            }\n\n            .rating-box {\n                background-color: #ffffff;\n                padding: 10px;\n                border-radius: 16px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n                width: 100%;\n                overflow: visible;\n            }\n\n            /* Table fixes to prevent inner scroll */\n            .reactable-table {\n                max-height: none !important;\n                overflow: visible !important;\n                display: block;\n                width: 100%;\n            }\n\n            .reactable-table tbody {\n                display: table-row-group !important;\n            }\n\n            .reactable-table thead,\n            .reactable-table tr,\n            .reactable-table td {\n                overflow: visible !important;\n                height: auto !important;\n            }\n\n            .reactable-table td {\n                white-space: nowrap;\n            }\n\n            @media (max-width: 768px) {\n                .main-container {\n                    flex-direction: column;\n                }\n                .prediction-panel,\n                .rating-panel {\n                    width: 100%;\n                    padding-right: 0px;\n                }\n            }\n        \"\"\")\n    )\n)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"code-tools":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["assets/partials/_navbar.html"],"css":["styles.scss"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","resources":["/Users/edwardwatson/Documents/AFL Model/Website/assets/HGR.png","assets/clubicons"],"theme":"styles.scss","page-layout":"custom","mainfont":"Editorial New Regular","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}